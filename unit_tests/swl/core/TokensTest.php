<?php

use \swl\core\Token,
    \swl\core\Tokens;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-03 at 21:15:54.
 */
class TokensTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Generated from @assert ("a", 1, 0) == null.
     *
     * @covers \swl\core\Tokens::DoubleAnalize
     */
    public function testDoubleAnalize()
    {
        $this->assertEquals(
                null, Tokens::doubleAnalize("a", 1, 0, "test.swl"),
                                            "Test the fail double analizer."
        );
    }

    /**
     * Generated from @assert ("::", 1, 0) == new Token("T_STATIC_CALL", "::", 1, 0).
     *
     * @covers \swl\core\Tokens::DoubleAnalize
     * @covers \swl\core\Token::__construct
     * @covers \swl\core\Token::test
     * @covers \swl\core\Tokens::GetPattern
     */
    public function testDoubleAnalize2()
    {
        $this->assertEquals(
                new Token("T_STATIC_CALL", "::", 1, 0, "test.swl"),
                          Tokens::doubleAnalize("::", 1, 0, "test.swl"),
                                                "Test the succes double analizer."
        );
    }

    /**
     * Generated from @assert ("T_STATIC_CALL") == '/^(::)$/'.
     *
     * @covers \swl\core\Tokens::GetPattern
     */
    public function testGetPattern()
    {
        $this->assertEquals(
                '/^(::)$/', Tokens::getPattern("T_STATIC_CALL"),
                                               "Test the special terminals get pattern"
        );
    }

    /**
     * Generated from @assert ("T_CONTROLLER") == '/^(controller)$/'.
     *
     * @covers \swl\core\Tokens::GetPattern
     */
    public function testGetPattern2()
    {
        $this->assertEquals(
                '/^(controller)$/', Tokens::getPattern("T_CONTROLLER"),
                                                       "Test the terminals get pattern"
        );
    }

    /**
     * Generated from @assert ("T_EOL") == '/^([;])$/'.
     *
     * @covers \swl\core\Tokens::GetPattern
     */
    public function testGetPattern3()
    {
        $this->assertEquals(
                '/^(;)$/', Tokens::getPattern("T_EOL"),
                                              "Test the simple terminals get pattern"
        );
    }

    /**
     * Generated from @assert ("T_INVALID") == null.
     *
     * @covers \swl\core\Tokens::GetPattern
     */
    public function testGetPattern4()
    {
        $this->assertEquals(
                null, Tokens::getPattern("T_INVALID"),
                                         "Test the invalid token get pattern"
        );
    }

    /**
     * Generated from @asser () == 'controller, model, core, attribute, database, config, module, library or enum token.'
     *
     * @covers \swl\core\Tokens::ExceptInitialFiles
     */
    public function testExceptInitialFiles()
    {
        $expected = "controller, model, core, attribute, database, config, module, library or enum token.";
        $this->assertEquals($expected, Tokens::exceptInitialFiles());
    }

}
